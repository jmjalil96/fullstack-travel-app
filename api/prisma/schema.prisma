// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== BetterAuth Models ==========

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sessions            Session[]
  accounts            Account[]
  profile             Profile?
  quotes              Quote[]
  policies            Policy[]
  passengers          Passenger[]
  agent               Agent?
  commissionsApproved Commission[] @relation("CommissionApprovedBy")
  commissionsCreated  Commission[] @relation("CommissionCreatedBy")
  auditLogs           AuditLog[]   @relation("AuditLogUser")

  @@index([email])
  @@index([createdAt])
}

model Account {
  id           String   @id @default(uuid())
  userId       String
  accountId    String
  providerId   String
  accessToken  String?
  refreshToken String?
  password     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@index([identifier])
  @@index([expiresAt])
}

// ========== Profile & Auth ==========

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  roleId    String
  firstName String?
  lastName  String?
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Restrict)

  @@index([userId])
  @@index([roleId])
  @@index([isActive])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  displayName String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
  profiles        Profile[]

  @@index([name])
  @@index([isActive])
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  displayName String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]

  @@index([name])
}

model RolePermission {
  id           String   @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// ========== Passengers ==========

model Passenger {
  id String @id @default(uuid())

  firstName String
  lastName  String
  birthDate DateTime
  email     String
  phone     String

  countryCode    String
  documentType   Int    @default(1)
  documentNumber String

  preferredFirstName String?
  preferredLastName  String?

  addressCountryCode  String
  addressStreetName   String
  addressStreetNumber String
  addressComplements  String?
  addressPostalCode   String
  addressCity         String
  addressState        String

  createdById String?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  policies  Policy[]

  @@index([email])
  @@index([documentNumber])
  @@index([lastName, firstName])
  @@index([createdById])
  @@index([isDeleted])
}

// ========== Quotes ==========

model Quote {
  id              String   @id @default(uuid())
  userId          String
  origin          String
  destination     String
  beginDate       DateTime @db.Date
  endDate         DateTime @db.Date
  travelType      Int      @default(1)
  passengersCount Int
  passengers      Json
  productCode     String?
  rateCode        String?
  productName     String?
  quotedTotal     Decimal? @db.Decimal(10, 2)
  quotedCurrency  String?  @default("USD")
  exchangeRate    Decimal? @db.Decimal(10, 4)
  processingFee   Decimal? @db.Decimal(10, 2)
  selectedAddons  Json?
  promotionalCode String?
  status          String   @default("saved")
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  policies Policy[]

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@index([createdAt])
}

// ========== Policies ==========

model Policy {
  id                   String   @id @default(uuid())
  quoteId              String
  userId               String
  passengerId          String
  voucherCode          String   @unique
  voucherGroup         String
  policyCode           String?
  ekitUrl              String
  policyUrl            String?
  productCode          String
  productName          String
  rateCode             String
  beginDate            DateTime @db.Date
  endDate              DateTime @db.Date
  totalAmount          Decimal  @db.Decimal(10, 2)
  currency             String
  exchangeRate         Decimal? @db.Decimal(10, 4)
  paymentMethod        String
  paymentReference     String?
  installments         Int      @default(1)
  paymentCurrencyLocal String?
  paymentTotalLocal    Decimal? @db.Decimal(12, 2)
  cardBrand            String?
  processingFee        Decimal? @db.Decimal(10, 2)
  status               String   @default("active")
  cancelledAt          DateTime?
  cancellationReason   String?
  bookingCode          String?
  promotionalCode      String?
  issuedAddons         Json?
  issuanceDate         DateTime @db.Date
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  quote       Quote        @relation(fields: [quoteId], references: [id], onDelete: Restrict)
  user        User         @relation(fields: [userId], references: [id], onDelete: Restrict)
  passenger   Passenger    @relation(fields: [passengerId], references: [id], onDelete: Restrict)
  commissions Commission[]

  @@index([quoteId])
  @@index([userId])
  @@index([passengerId])
  @@index([voucherCode])
  @@index([voucherGroup])
  @@index([status])
  @@index([createdAt])
}

// ========== Agents & Commissions ==========

model Agent {
  id             String   @id @default(uuid())
  userId         String   @unique
  agentCode      String   @unique
  parentAgentId  String?
  path           String
  level          Int      @default(0)
  commissionRate Decimal  @db.Decimal(6, 4)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Restrict)
  parentAgent Agent?       @relation("AgentHierarchy", fields: [parentAgentId], references: [id], onDelete: SetNull)
  childAgents Agent[]      @relation("AgentHierarchy")
  commissions Commission[]

  @@index([userId])
  @@index([agentCode])
  @@index([parentAgentId])
  @@index([path])
  @@index([isActive])
}

model Commission {
  id               String    @id @default(uuid())
  policyId         String
  agentId          String
  commissionRate   Decimal   @db.Decimal(6, 4)
  baseAmount       Decimal   @db.Decimal(10, 2)
  commissionAmount Decimal   @db.Decimal(10, 2)
  currency         String    @default("USD")
  status           String    @default("pending")
  approvedAt       DateTime?
  approvedById     String?
  paidAt           DateTime?
  paymentReference String?
  notes            String?
  createdById      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  policy     Policy @relation(fields: [policyId], references: [id], onDelete: Restrict)
  agent      Agent  @relation(fields: [agentId], references: [id], onDelete: Restrict)
  approvedBy User?  @relation("CommissionApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  createdBy  User?  @relation("CommissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  @@index([policyId])
  @@index([agentId])
  @@index([status])
  @@index([createdById])
  @@index([approvedById])
}

// ========== Audit Logs ==========

model AuditLog {
  id           String   @id @default(uuid())
  userId       String?
  action       String
  resourceType String
  resourceId   String?
  metadata     Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())

  user User? @relation("AuditLogUser", fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([resourceType])
  @@index([resourceId])
  @@index([createdAt])
}
